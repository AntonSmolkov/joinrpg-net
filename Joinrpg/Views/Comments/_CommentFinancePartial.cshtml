@using JoinRpg.DataModel
@using JoinRpg.Web.Models
@model CommentFinanceOperationViewModel

@switch (Model.FinanceOperation.OperationType)
{
    case FinanceOperationType.FeeChange:
        <div><b>Изменение взноса:</b> @Model.FinanceOperation.FeeChange &#8381;</div>
        break;
    case FinanceOperationType.PreferentialFeeRequest:
        <div><b>Запрос льготного взноса</b></div>
        break;
    case FinanceOperationType.Submit:
    case FinanceOperationType.Online:
        <div><b>Внесение денег:</b> @Model.FinanceOperation.MoneyAmount &#8381;</div>
        break;
    case FinanceOperationType.Refund:
        <div><b>Возврат денег:</b> @Model.FinanceOperation.MoneyAmount &#8381;</div>
        break;
    case FinanceOperationType.TransferTo:
        <div><b>Передача денег на другую заявку:</b> @Model.FinanceOperation.MoneyAmount &#8381;</div>
        <div><b>Получатель:</b> @Html.ActionLink(Model.FinanceOperation.LinkedClaim.Name, "Edit", "Claim", new { projectId = Model.FinanceOperation.LinkedClaim.ProjectId, claimId = Model.FinanceOperation.LinkedClaimId }, new { target = "_blank" })</div>
        break;
    case FinanceOperationType.TransferFrom:
        <div><b>Получение денег от другой заявки:</b> @Model.FinanceOperation.MoneyAmount &#8381;</div>
        <div><b>Источник:</b> @Html.ActionLink(Model.FinanceOperation.LinkedClaim.Name, "Edit", "Claim", new { projectId = Model.FinanceOperation.LinkedClaim.ProjectId, claimId = Model.FinanceOperation.LinkedClaimId }, new { target = "_blank" })</div>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}
@if (Model.FinanceOperation.PaymentType != null)
{
    <div><b>Способ оплаты:</b> @Model.FinanceOperation.PaymentType.GetDisplayName()</div>
}
<div><b>Дата операции:</b> @Model.FinanceOperation.OperationDate.ToShortDateString()</div>
<div>
    <b>Состояние: </b>
    @switch (Model.FinanceOperation.OperationType)
    {
        case FinanceOperationType.PreferentialFeeRequest:
            switch (Model.FinanceOperation.State)
            {
                case FinanceOperationState.Approved:
                    <span class="label label-success">Запрос одобрен</span>
                    break;
                case FinanceOperationState.Proposed:
                    if (Model.ShowModerationControls)
                    {
                        <span>Требуется действие:</span>
                        <button class="btn btn-warning btn-xs" onclick="toggleCommentEditor(@Model.ReplyFormIndex)">Одобрить / Отклонить</button>
                    }
                    else
                    {
                        <span class="label label-default">Запрос в обработке</span>
                    }
                    break;
                case FinanceOperationState.Declined:
                    <span class="label label-danger">Запрос льготы отклонен</span>
                    break;
            }
            break;
        case FinanceOperationType.Submit:
            switch (Model.FinanceOperation.State)
            {
                case FinanceOperationState.Approved:
                    <span class="label label-success">Платеж принят</span>
                    break;
                case FinanceOperationState.Proposed:
                    if (Model.ShowModerationControls)
                    {
                        <span>Требуется действие:</span>
                        <button class="btn btn-warning btn-sm" onclick="toggleCommentEditor(@Model.ReplyFormIndex)">Подтвердить / Отклонить</button>
                    }
                    else
                    {
                        <span class="label label-default">Ожидание подтверждения</span>
                    }
                    break;
                case FinanceOperationState.Declined:
                    <span class="label label-danger">Получение не подтверждено</span>
                    break;
            }
            break;
        case FinanceOperationType.Online:
            switch (Model.FinanceOperation.State)
            {
                case FinanceOperationState.Approved:
                    <span class="label label-success">Платеж проведен</span>
                    break;
                case FinanceOperationState.Proposed:
                    <span class="label label-default">Платеж обрабатывается</span>
                    break;
                case FinanceOperationState.Declined:
                    <span class="label label-danger">Банк отклонил платеж</span>
                    break;
            }
            break;
        case FinanceOperationType.Refund:
            switch (Model.FinanceOperation.State)
            {
                case FinanceOperationState.Approved:
                    <span class="label label-success">Возврат выполнен</span>
                    break;
                case FinanceOperationState.Proposed:
                    <span class="label label-default">Возврат обрабатывается</span>
                    break;
                case FinanceOperationState.Declined:
                    <span class="label label-danger">Возврат не успешен</span>
                    break;
            }
            break;
        case FinanceOperationType.TransferTo:
            break;
        case FinanceOperationType.TransferFrom:
            break;
        case FinanceOperationType.FeeChange:
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
</div>
